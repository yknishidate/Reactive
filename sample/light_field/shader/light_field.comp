/// in uvec3 gl_GlobalInvocationID;
/// in uvec3 gl_NumWorkGroups;
/// const uvec3 gl_WorkGroupSize;

#version 460
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, rgba8) uniform image2D outputImage;
layout(binding = 1) uniform sampler3D images;
layout(push_constant) uniform PushConstants {
    int rows;
    int cols;
    vec2 st;
} constants;

float indexToDepth(int index)
{
    return (index + 0.5) / float(constants.rows * constants.cols);
}

int coordToIndex(vec2 coord)
{
    // coord: [0, 16]
    return int(constants.cols * coord.y + coord.x);
}

float coordToDepth(vec2 coord)
{
    return indexToDepth(coordToIndex(coord));
}

vec4 lightField(vec2 st, vec2 uv)
{
    // st: camera
    // uv: pixel
    // lt---rt
    // |     |
    // lb---rb

    // [0, 16]
    vec2 lt = floor(st * vec2(constants.rows - 1, constants.cols - 1));
    vec2 rt = lt + vec2(1, 0);
    vec2 lb = lt + vec2(0, 1);
    vec2 rb = lt + vec2(1, 1);
    float depth = coordToDepth(lt);

    return texture(images, vec3(uv, depth));
}

void main()
{
    vec2 uv =  vec2(gl_GlobalInvocationID.xy) / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
    vec4 color = lightField(constants.st, uv);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), color);
}
