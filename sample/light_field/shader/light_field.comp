/// in uvec3 gl_GlobalInvocationID;
/// in uvec3 gl_NumWorkGroups;
/// const uvec3 gl_WorkGroupSize;

#version 460
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, rgba8) uniform image2D outputImage;
layout(binding = 1) uniform sampler3D images;
layout(push_constant) uniform PushConstants {
    int rows;
    int cols;
    vec2 st;
    float apertureSize;
} constants;

float coordToDepth(vec2 coord)
{
    int index = int(constants.cols * coord.y + coord.x);
    float depth = (index + 0.5) / float(constants.rows * constants.cols);
    return depth;
}

vec4 lightField(vec2 uv, vec2 st)
{
    vec4 color = vec4(0);
    int count = 0;
    for (int i = 0; i < constants.cols; i++) {
        for (int j = 0; j < constants.rows; j++) {
            vec2 cameraPos = vec2(i, j);
            vec2 cameraUV = cameraPos / vec2(constants.cols, constants.rows);
            if(distance(cameraUV, uv) < constants.apertureSize){
                vec3 index = vec3(st, coordToDepth(cameraPos));
                color += texture(images, index);
                count++;
            }
        }
    }
    return color / count;
}

void main()
{
    vec2 uv =  vec2(gl_GlobalInvocationID.xy) / vec2(gl_WorkGroupSize.xy * gl_NumWorkGroups.xy);
    vec4 color = lightField(constants.st, uv);
    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), color);
}
