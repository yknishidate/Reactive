#version 460
#extension GL_GOOGLE_include_directive : enable
#define NUM_CANDIDATES 16
#include "common.glsl"
#include "../random.glsl"

layout(location = 0) rayPayloadEXT HitPayload payload;

vec3 sampleSphereLight(in vec2 randVal, in vec3 dir)
{
    vec3 normal = -normalize(dir);
    vec3 tangent;
    vec3 bitangent;
    createCoordinateSystem(normal, tangent, bitangent);

    vec3 sampleDir = sampleHemisphere(randVal.x, randVal.y);
    return sampleDir.x * tangent + sampleDir.y * bitangent + sampleDir.z * normal;
}

int sampleLightUniform(inout uint seed)
{
    if(pushConstants.numLights == 1) return 0;
    return int(rand(seed) * float(pushConstants.numLights - 1.0));
}

float targetPDF(in SphereLight light, vec3 position, vec3 normal, vec3 diffuse)
{
    vec3 hitToLight = light.position - position;
    vec3 direction = normalize(hitToLight);
    float dist = length(hitToLight);

    vec3 brdf = diffuse / M_PI;
    float squareDist = dist * dist;
    float cosine = max(0.0, dot(direction, normal));
    
    // Target PDF: brdf * Le * G
    return max(0.0, length(brdf * light.intensity) / squareDist * cosine);
}

struct Reservoir
{
    float w_sum; // sum of all weights
    int x_z;     // sample
    float p_z;   // probability of target
    int m;       // number of streaming
};

bool updateReservoir(inout Reservoir reservoir, int x, float w, float p, inout uint seed)
{
    reservoir.w_sum += w;
    reservoir.m += 1;
    if (rand(seed) < (w / reservoir.w_sum)) {
        reservoir.x_z = x;
        reservoir.p_z = p;
        return true;
    }
    return false;
}

float calcReservoirWeight(in Reservoir reservoir)
{
    return reservoir.w_sum / reservoir.m / reservoir.p_z;
}

vec3 calcRadiance(vec3 position, vec3 normal, vec3 diffuse,
                  vec3 intensity, float dist, vec3 direction)
{
    vec3 brdf = diffuse / M_PI;
    float squareDist = dist * dist;
    float cosine = max(0.0, dot(direction, normal));
    float pdf = 1.0 / pushConstants.numLights;

    // Radiance: brdf * Le * G / pdf
    return brdf * intensity / squareDist * cosine / pdf;
}

void main()
{
    // Calc seed
    uvec2 s = pcg2d(uvec2(gl_LaunchIDEXT.xy * (pushConstants.frame + 1)));
    uint seed = s.x + s.y;

    vec3 position = imageLoad(positionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 normal = imageLoad(normalImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 diffuse = imageLoad(diffuseImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 emission = imageLoad(emissionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    uint instanceIndex = imageLoad(instanceIndexImage, ivec2(gl_LaunchIDEXT.xy)).x;

    if(length(emission) > 0.1) {
        imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(emission, 1));
        return;
    }

    // Get buffer addresses
    BufferAddress address = addresses.address[0];
    SphereLights sphereLights = SphereLights(address.sphereLights);

    // Sample light
    Reservoir reservoir;
    reservoir.w_sum = 0.0;
    reservoir.x_z = 0;
    reservoir.p_z = 0.0;
    reservoir.m = 0;
    for(int i = 0; i < NUM_CANDIDATES; i++){
        // Sample candidates
        int x = sampleLightUniform(seed);

        // Calc weights
        SphereLight sphereLight = sphereLights.s[x];
        float p = targetPDF(sphereLight, position, normal, diffuse);
        float w = p / (1.0 / NUM_CANDIDATES);

        // Update
        updateReservoir(reservoir, x, w, p, seed);
    }
    
    // if all zero
    if(reservoir.w_sum == 0.0){
        imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(0));
        return;
    }

    // get light
    SphereLight sphereLight = sphereLights.s[reservoir.x_z];
    vec3 hitToLight = sphereLight.position - position;
    vec3 dir = normalize(hitToLight);
    float dist = length(hitToLight) - sphereLight.radius;

    // trace shadow ray
    payload.shadowed = true;
    traceRayEXT(
        topLevelAS,
        gl_RayFlagsTerminateOnFirstHitEXT | 
        gl_RayFlagsSkipClosestHitShaderEXT,
        0xff, // cullMask
        0,    // sbtRecordOffset
        0,    // sbtRecordStride
        0,    // missIndex
        position, 0.01,
        dir, dist - 0.01,
        0     // payloadLocation
    );

    // hit light
    vec3 radiance = vec3(0.0);
    if(!payload.shadowed){
        radiance = calcRadiance(position, normal, diffuse, sphereLight.intensity, dist, dir);
    }
    vec3 color = emission + radiance;
    
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}
