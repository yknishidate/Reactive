#version 460
#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"
#include "random.glsl"

layout(location = 0) rayPayloadEXT HitPayload payLoad;

vec3 cosineSampleHemisphere(float u1, float u2)
{
    vec3 dir;
    float r = sqrt(u1);
    float phi = 2.0 * M_PI * u2;
    dir.x = r * cos(phi);
    dir.y = r * sin(phi);
    dir.z = sqrt(max(0.0, 1.0 - dir.x * dir.x - dir.y * dir.y));
    return dir;
}

void createCoordinateSystem(in vec3 N, out vec3 T, out vec3 B)
{
    if(abs(N.x) > abs(N.y))
        T = vec3(N.z, 0, -N.x) / sqrt(N.x * N.x + N.z * N.z);
    else
        T = vec3(0, -N.z, N.y) / sqrt(N.y * N.y + N.z * N.z);
    B = cross(N, T);
}

vec3 sampleHemisphere(vec2 randVal, in vec3 x, in vec3 y, in vec3 z)
{
    float r1 = randVal.x;
    float r2 = randVal.y;
    vec3 direction = cosineSampleHemisphere(r1, r2);
    return direction.x * x + direction.y * y + direction.z * z;
}

vec3 sampleDirection(vec2 randVal, vec3 normal)
{
    vec3 tangent;
    vec3 bitangent;
    createCoordinateSystem(normal, tangent, bitangent);
    vec3 dir = cosineSampleHemisphere(randVal.x, randVal.y);
    return dir.x * tangent + dir.y * bitangent + dir.z * normal;
}

void main()
{
    uint maxDepth = 4;
    uint maxSamples = 1;
    vec3 color = vec3(0.0);

    for(uint sampleCount = 0; sampleCount < maxSamples; sampleCount++){
        // Calc seed
        uvec2 s = pcg2d(ivec2(gl_LaunchIDEXT.xy) * (sampleCount + pushConstants.frame * maxSamples + 1));
        uint seed = s.x + s.y;

        // Calc ray
        const vec2 screenPos = vec2(gl_LaunchIDEXT.xy) + vec2(rand(seed), rand(seed));
        const vec2 inUV = screenPos / vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin    = pushConstants.invView * vec4(0, 0, 0, 1);
        vec4 target    = pushConstants.invProj * vec4(d.x, d.y, 1, 1) ;
        vec4 direction = pushConstants.invView * vec4(normalize(target.xyz), 0) ;
        
        vec3 weight = vec3(1.0);
        payLoad.done = false;

        for(uint depth = 0; depth < maxDepth; depth++){
            traceRayEXT(
                topLevelAS,
                gl_RayFlagsOpaqueEXT,
                0xff, // cullMask
                0,    // sbtRecordOffset
                0,    // sbtRecordStride
                0,    // missIndex
                origin.xyz,
                0.001,
                direction.xyz,
                10000.0,
                0     // payloadLocation
            );
            if(payLoad.done){
                color += weight * payLoad.emittion;
                break;
            }else{
                vec2 randVal = vec2(rand(seed), rand(seed));
                origin = vec4(payLoad.position + payLoad.normal * 0.001, 1.0);
                direction = vec4(sampleDirection(randVal, payLoad.normal), 1.0);
                float pdf = 1.0 / (2.0 * M_PI);
                weight *= payLoad.brdf * dot(direction.xyz, payLoad.normal) / pdf;
            }
        }
    }
    color /= maxSamples;

    float weight = 1.0 / (pushConstants.frame + 1);
    vec4 oldColor = imageLoad(inputImage, ivec2(gl_LaunchIDEXT.xy));
    vec4 newColor = vec4(color, 0.0);
    newColor = oldColor * (1.0 - weight) + newColor * weight;
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), newColor);
}
