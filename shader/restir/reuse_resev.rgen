#version 460
#extension GL_GOOGLE_include_directive : enable
#define NUM_CANDIDATES 16
#include "common.glsl"

layout(binding =  14, rgba8ui) uniform uimage2D newResevSampleImage; // (x_z, m)
layout(binding =  15, rgba16f) uniform image2D newResevWeightImage;  // (w_sum, p_z)

layout(location = 0) rayPayloadEXT HitPayload payload;

// resev          init    reuse  shading
//   xy: current   store   load   -
//   zw: next      store   store  load

void combineReservoir(inout Reservoir reservoir, inout int m_c, int dx, int dy, inout uint seed)
{
    ivec2 id = ivec2(gl_LaunchIDEXT.xy) + ivec2(dx, dy);

    vec3 emission_ = imageLoad(emissionImage, id).rgb;
    if(length(emission_) > 0.1){
        return;
    }
    uvec2 resevSample_ = imageLoad(resevSampleImage, id).xy;
    vec2 resevWeight_ = imageLoad(resevWeightImage, id).xy;

    updateReservoir(reservoir, int(resevSample_.x), resevWeight_.x, resevWeight_.y, seed);
    m_c += int(resevSample_.y);
}

void main()
{
    uvec2 s = pcg2d(uvec2(gl_LaunchIDEXT.xy * (pushConstants.frame + 1)));
    uint seed = s.x + s.y;

    vec3 position = imageLoad(positionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 normal = imageLoad(normalImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 diffuse = imageLoad(diffuseImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 emission = imageLoad(emissionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    uint instanceIndex = imageLoad(instanceIndexImage, ivec2(gl_LaunchIDEXT.xy)).x;

    // TODO: create createResev()
    Reservoir reservoir;
    reservoir.w_sum = 0.0;
    reservoir.x_z = 0;
    reservoir.p_z = 0.0;
    reservoir.m = 0;    

    int kernelSize = 1;
    if(gl_LaunchIDEXT.x - kernelSize < 0 || gl_LaunchIDEXT.x + kernelSize >= gl_LaunchSizeEXT.x || 
       gl_LaunchIDEXT.y - kernelSize < 0 || gl_LaunchIDEXT.y + kernelSize >= gl_LaunchSizeEXT.y ) {
        uvec2 resevSample_ = imageLoad(resevSampleImage, ivec2(gl_LaunchIDEXT.xy)).xy;
        vec2 resevWeight_ = imageLoad(resevWeightImage, ivec2(gl_LaunchIDEXT.xy)).xy;
        reservoir.x_z = int(resevSample_.x);
        reservoir.m = int(resevSample_.y);
        reservoir.w_sum = resevWeight_.x;
        reservoir.p_z = resevWeight_.y;
       return;
    }

    int m_c = 0;
    combineReservoir(reservoir, m_c,  0,  0, seed);
    combineReservoir(reservoir, m_c,  0,  1, seed);
    combineReservoir(reservoir, m_c,  0, -1, seed);
    combineReservoir(reservoir, m_c,  1,  0, seed);
    combineReservoir(reservoir, m_c, -1,  0, seed);
    reservoir.m = m_c;
    
    imageStore(resevSampleImage, ivec2(gl_LaunchIDEXT.xy), ivec4(reservoir.x_z, reservoir.m, reservoir.x_z, reservoir.m));
    imageStore(resevWeightImage, ivec2(gl_LaunchIDEXT.xy), vec4(reservoir.w_sum, reservoir.p_z, reservoir.w_sum, reservoir.p_z));
    imageStore(newResevSampleImage, ivec2(gl_LaunchIDEXT.xy), ivec4(reservoir.x_z, reservoir.m, reservoir.x_z, reservoir.m));
    imageStore(newResevWeightImage, ivec2(gl_LaunchIDEXT.xy), vec4(reservoir.w_sum, reservoir.p_z, reservoir.w_sum, reservoir.p_z));
}
