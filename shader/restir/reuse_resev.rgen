#version 460
#extension GL_GOOGLE_include_directive : enable
#define NUM_CANDIDATES 16
#include "common.glsl"

layout(binding =  14, rg32ui) uniform uimage2D newResevSampleImage; // (x_z, m)
layout(binding =  15, rg16f) uniform image2D newResevWeightImage;  // (w_sum, p_z)

layout(location = 0) rayPayloadEXT HitPayload payload;

float targetPDF(in SphereLight light, vec3 position, vec3 normal, vec3 diffuse)
{
    vec3 hitToLight = light.position - position;
    vec3 direction = normalize(hitToLight);
    float dist = length(hitToLight);

    vec3 brdf = diffuse / M_PI;
    float squareDist = dist * dist;
    float cosine = max(0.0, dot(direction, normal));
    
    // Target PDF: brdf * Le * G
    return max(0.0, length(brdf * light.intensity) / squareDist * cosine);
}

bool updateReservoir(inout Reservoir reservoir, int x, int m, float w, float p, inout uint seed)
{
    reservoir.w_sum += w;
    reservoir.m += m;
    if (rand(seed) < (w / reservoir.w_sum)) {
        reservoir.x_z = x;
        reservoir.p_z = p;
        return true;
    }
    return false;
}

void combineReservoir(inout Reservoir reservoir, int dx, int dy, inout uint seed)
{
    ivec2 id = ivec2(gl_LaunchIDEXT.xy) + ivec2(dx, dy);
    Reservoir r = loadReservoir(id);
    updateReservoir(reservoir, r.x_z, r.m, r.w_sum, r.p_z, seed);
}

void combineReservoir(inout Reservoir reservoir, int dx, int dy, inout uint seed,
                      vec3 position, vec3 normal, vec3 diffuse)
{
    ivec2 id = ivec2(gl_LaunchIDEXT.xy) + ivec2(dx, dy);
    Reservoir r = loadReservoir(id);
    BufferAddress address = addresses.address[0];
    SphereLights sphereLights = SphereLights(address.sphereLights);
    SphereLight sphereLight = sphereLights.s[r.x_z];
    float Wi = calcReservoirWeight(r);
    float Pi = targetPDF(sphereLight, position, normal, diffuse);
    float wi = Pi * Wi * r.m;
    updateReservoir(reservoir, r.x_z, r.m, wi, Pi, seed);
}

bool canCombine(vec3 position, vec3 normal, vec3 emission, uint instanceIndex, int dx, int dy)
{
    ivec2 id = ivec2(gl_LaunchIDEXT.xy) + ivec2(dx, dy);
    vec3 position_ = imageLoad(positionImage, id).xyz;
    vec3 normal_ = imageLoad(normalImage, id).xyz;
    vec3 emission_ = imageLoad(emissionImage, id).xyz;
    uint instanceIndex_ = imageLoad(instanceIndexImage, id).x;
    return distance(position, position_) < 0.1
        && distance(normal, normal_) < 0.01
        && distance(emission, emission_) < 0.01
        && instanceIndex == instanceIndex_;
}

void main()
{
    uvec2 s = pcg2d(uvec2(gl_LaunchIDEXT.xy * (pushConstants.frame + 1)));
    uint seed = s.x + s.y;
    ivec2 id = ivec2(gl_LaunchIDEXT.xy);

    vec3 position = imageLoad(positionImage, id).rgb;
    vec3 normal = imageLoad(normalImage, id).rgb;
    vec3 diffuse = imageLoad(diffuseImage, id).rgb;
    vec3 emission = imageLoad(emissionImage, id).rgb;
    uint instanceIndex = imageLoad(instanceIndexImage, id).x;

    if(length(emission) > 0.1){
        imageStore(newResevSampleImage, id, ivec4(0));
        imageStore(newResevWeightImage, id, vec4(0));
        return;
    }

    Reservoir reservoir = loadReservoir(id);

    int kernelSize = 1;
    if(gl_LaunchIDEXT.x - kernelSize < 0 || gl_LaunchIDEXT.x + kernelSize >= gl_LaunchSizeEXT.x || 
       gl_LaunchIDEXT.y - kernelSize < 0 || gl_LaunchIDEXT.y + kernelSize >= gl_LaunchSizeEXT.y ) {
        imageStore(newResevSampleImage, id, ivec4(reservoir.x_z, reservoir.m, 0, 0));
        imageStore(newResevWeightImage, id, vec4(reservoir.w_sum, reservoir.p_z, 0, 0));
        return;
    }

    int radius = 20;
    int numNeighbors = 5;
    for(int i = 0; i < numNeighbors; i++){
        int dx = int(radius * rand(seed) - radius * 0.5);
        int dy = int(radius * rand(seed) - radius * 0.5);
        if(canCombine(position, normal, emission, instanceIndex, dx, dy)) combineReservoir(reservoir, dx, dy, seed, position, normal, diffuse);
    }
    
    imageStore(newResevSampleImage, id, ivec4(reservoir.x_z, reservoir.m, 0, 0));
    imageStore(newResevWeightImage, id, vec4(reservoir.w_sum, reservoir.p_z, 0, 0));
}
