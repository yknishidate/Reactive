#version 460
#extension GL_GOOGLE_include_directive : enable
#define NUM_CANDIDATES 16
#include "common.glsl"

layout(location = 0) rayPayloadEXT HitPayload payload;

// resev          init    reuse  shading
//   x: current   store   load   -
//   y: next      store   store  load

void main()
{
    vec3 position = imageLoad(positionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 normal = imageLoad(normalImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 diffuse = imageLoad(diffuseImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    vec3 emission = imageLoad(emissionImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
    uint instanceIndex = imageLoad(instanceIndexImage, ivec2(gl_LaunchIDEXT.xy)).x;
    uint resevSample = imageLoad(resevSampleImage, ivec2(gl_LaunchIDEXT.xy)).x;
    float resevWeight = imageLoad(resevWeightImage, ivec2(gl_LaunchIDEXT.xy)).x;

    // TODO: create createResev()
    Reservoir reservoir;
    reservoir.w_sum = 0.0;
    reservoir.x_z = 0;
    reservoir.p_z = 0.0;
    reservoir.m = 0;

    for(int offsetX = -2; offsetX <= 2; offsetX++) {
        for(int offsetY = -2; offsetY <= 2; offsetY++) {
            ivec2 offset = ivec2(offsetX, offsetY);
            ivec2 id = ivec2(gl_LaunchIDEXT.xy) + offset;
            if(id.x < 0 || id.x >= gl_LaunchSizeEXT.x || 
               id.y < 0 || id.y >= gl_LaunchSizeEXT.y ) {
                continue;
            }

            // vec3 position_ = imageLoad(positionImage, id).rgb;
            // vec3 normal_ = imageLoad(normalImage, id).rgb;
            // vec3 diffuse_ = imageLoad(diffuseImage, id).rgb;
            // vec3 emission_ = imageLoad(emissionImage, id).rgb;
            // uint instanceIndex_ = imageLoad(instanceIndexImage, id).x;
            uint resevSample_ = imageLoad(resevSampleImage, id).x;
            float resevWeight_ = imageLoad(resevWeightImage, id).x;
            // float dist = distance(position, position_);
            // if(dist < 0.1) {
            //     continue;
            // }
            // float weight = 1.0 / distance;
            // reservoir.w_sum += weight;
            // reservoir.x_z += weight * resevSample_;
            // reservoir.p_z += weight * resevWeight_;
            // reservoir.m++;
        }
    }
    
    imageStore(resevSample, ivec2(gl_LaunchIDEXT.xy), ivec4(resevSample));
    imageStore(resevWeight, ivec2(gl_LaunchIDEXT.xy), vec4(resevWeight));
}
