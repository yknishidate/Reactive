#version 460
#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"
#include "random.glsl"

layout(location = 0) rayPayloadEXT HitPayload payLoad;

vec3 countToColor(int count)
{
    return vec3[](vec3(0, 0, 0),
                  vec3(1, 0, 0),
                  vec3(0, 1, 0),
                  vec3(0, 0, 1),
                  vec3(1, 1, 0),
                  vec3(1, 1, 1))[count % 6];
}

void main()
{
    const vec2 screenPos = vec2(gl_LaunchIDEXT.xy) + vec2(0.5, 0.5);
    const vec2 uv = screenPos / vec2(gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

    vec4 origin    = pushConstants.invView * vec4(0, 0, 0, 1);
    vec4 target    = pushConstants.invProj * vec4(uv.x, uv.y, 1, 1) ;
    vec4 direction = pushConstants.invView * vec4(normalize(target.xyz), 0) ;
        
    payLoad.done = false;
    payLoad.count = ivec2(0, 0);

    vec3 lightDir = normalize(vec3(1, -1, 1));
    vec3 color = vec3(0.0);
    traceRayEXT(
        topLevelAS,
        gl_RayFlagsSkipClosestHitShaderEXT,
        0xff, // cullMask
        0,    // sbtRecordOffset
        0,    // sbtRecordStride
        0,    // missIndex
        origin.xyz,
        0.001,
        direction.xyz,
        10000.0,
        0     // payloadLocation
    );
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), 
               vec4(countToColor(payLoad.count[0]), 1.0));
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.x + gl_LaunchSizeEXT.x, gl_LaunchIDEXT.y), 
               vec4(countToColor(payLoad.count[1]), 1.0));
}
